/*******************************************************************************

DO NOT EDIT THIS FILE AS PART OF A SOLUTION FOR A CLIENT.

This file contains standard JavaScript used by Solution Builder. This file will
be overwritten during Solution Builder upgrades and your changes will be lost.

All client-specific JavaScript should instead go in \custom\custom.js.

*******************************************************************************/

/*******************************************************************************
Global variables
*******************************************************************************/
var solutionBuilderScreenID;
var solutionBuilderPrimaryForm;
var p_parameters;
var doFirstTime = 0;
var autoClickFirstLink = false;
var lookup = null;
var ProcessingAllRows = false;
var useVerticalGridNav = true;
var useMultilinePaste = true;
var multilinePasteReplaceContents = true;
var useSaveShortcut = true;

/*******************************************************************************
Document on ready
*******************************************************************************/


$(document).ready(documentOnReady);

function documentOnReady() {

    //solutionBuilderScreenID = $("#mainContent_currentScreenID").val();
    solutionBuilderScreenID = getUrlParameter('ScreenID');
    solutionBuilderPrimaryForm = $(document.forms[0]);

    //initialize the lookup dialog div
    initializeLookupDialog();


    //take out for now...figure out how to re-add
    //JDC 2015.06.05
//    $(solutionBuilderPrimaryForm).submit(preventDoubleSubmit);

    //also need to hijack the __postback to prevent double submit
    //hijackPostBack();

    //prevent double submit of anchors with href containing .aspx
    //$("a[href*='.aspx'][target!='_blank']").on("click", function() {
    //    $(this).click(function () { return false; });
    //});

    initializeUnsavedChangesWarning(solutionBuilderScreenID);
    $(".hasInitialFocus").focus();
    if (typeof documentOnReadyCustom == "function") {
        documentOnReadyCustom(solutionBuilderScreenID, solutionBuilderPrimaryForm);
    }
    p_parameters = parseURLFor_p_Parameters();

    //add serverValidate jQuery validation rule
    //if (jQuery.validator) {
    //    jQuery.validator.addMethod("serverValidate", serverValidate, "not valid.");
    //}
    //auto click first link in a grid on a search form that has only one row (maybe based on property of a search field?)
    //if (autoClickFirstLink) {
    //    AutoClickFirstLinkForSingleRow();
    //}

    if (typeof customPageInit == "function") {
        customPageInit();
    }

    //take out for angular
    //lineUpDivs();

    //init any context menu
    //initContextMenu()

    //take out for angular
    //setDetailTabWidth();

    //take out for angular
    //activateGridNavigation(useVerticalGridNav);
    //activateGridMultilinePaste(useMultilinePaste);
    //activateSaveShortcut();
    //setContentLeftMargin();
    //formatInputs();

    //end block take out for angular

}

function getUrlParameter(val) {
    var result = "Not found",
        tmp = [];
    location.search
    //.replace ( "?", "" ) 
    // this is better, there might be a question mark inside
    .substr(1)
        .split("&")
        .forEach(function (item) {
            tmp = item.split("=");
            if (tmp[0].toLowerCase() === val.toLowerCase()) result = tmp[1];
        });
    return result;
}

//function updateAll(field) {
//    alert(angular.element(field).controller.record);
//}




function activateSaveShortcut() {
    if (useSaveShortcut) {
        $(window).keydown(function(event) {
            if (event.ctrlKey || event.metaKey) {
                switch (String.fromCharCode(event.which).toLowerCase()) {
                case 's':
                    event.preventDefault();
                    if ($('#mainContent_saveFormMasterBtn').length) {
                        $('#mainContent_saveFormMasterBtn').click();
                    } else if ($('#mainContent_btnSave').length) {
                        $('#mainContent_btnSave').click();
                    } else if ($('#mainContent_SaveChanges').length) {
                        $('#mainContent_SaveChanges').click();
                    } else {
                        alert('no save');
                    }
                    break;
                }
            }
        });
    }
}


function activateGridMultilinePaste(isActive) {
    if (isActive) {
        var focusInput;
        $(':input').focus(function () {
            focusInput = $(this);
        });
        if ($.browser.msie && $.browser.version == '10.0') {
            $('[controlType="Grid"]').find('input').on('beforepaste', function(e) {
                //We don't have access to the paste event directly due to security.
                //Also, textboxes can't accept line breaks.
                //So we will create a text area, put the contents of the paste there, then use the contents of the
                //   textarea to split into array then iterate through the grid and paste into the given cells
                //IE won't let us change focus in paste event, so we use beforepaste. It seems to like the idea of firing
                //   The focus event after the paste so we're good with that
                $('<textarea />').attr('id', 'temp').attr('style', 'position:absolute; left:-3000px;').appendTo('#Form2');
                var originalTextbox = this;
                $('#temp').change(function() {
                    var pastedValue = $(this).val();
                    if (pastedValue > '') {
                        formatCells(pastedValue, originalTextbox);
                        $('#temp').remove();
                    }

                });
                $('#temp').focus(function() {
                    $('#temp').blur();
                });
                $('#temp').focus();
            });
        } else {
            $('[controlType="Grid"]').find('input').on('paste', function (e) {
                //We don't have access to the paste event directly due to security.
                //Also, textboxes can't accept line breaks.
                //So we will create a text area, put the contents of the paste there, then use the contents of the
                //   textarea to split into array then iterate through the grid and paste into the given cells
                //Chrome doesn't fire beforepaste event. Unfortunately this means that the focus at the end does not fire
                //   the onfocus event. So we've tied the post-paste logic to key up. This means that those who copy and
                //   paste using shortcuts will see no behavioral differences. Those who use the mouse will have to click somewhere
                //   on the screen to fire the onblur and finish the paste
                $('<textarea />').attr('id', 'temp').attr('style', 'position:absolute; left:-3000px;').appendTo('#Form2');
                var originalTextbox = this;
                $('#temp').change(function () {
                    var pastedValue = $(this).val();
                    if (pastedValue > '') {
                        formatCells(pastedValue, originalTextbox);
                        $('#temp').remove();
                    }

                });
                $('#temp').focus(function () {
                    $('#temp').blur();
                });
                $('#temp').keyup(function() {
                    $('#temp').blur();
                });
                $('#temp').focus();
            });
        }
    }
}

function formatCells(xls, firstElement) {
    var arrGroup = xls.split('\n');
    var currentElement = firstElement;
    var fieldName = $(firstElement).attr('fieldName');
    for (var i = 0; i < arrGroup.length - 1; i++) {
        //decided to append to existing data, rather than overwrite, due to one-time pasting
        //still possibly needs to accomidate for pasting mid-text on single line pasting
        //**changed to config setting at top
        if (arrGroup[i].indexOf('\t') >= 0) {
            var currentRow = arrGroup[i].split('\t', -1);
            for (var j = 0; j < currentRow.length; j++) {
                var existingRowData = $(currentElement).val();
                if (multilinePasteReplaceContents) {
                    existingRowData = '';
                }
                $(currentElement).focus().val(existingRowData + currentRow[j]);
                var nextRowElement = $(currentElement).closest('td').next().find('input');

                //sometimes the pasted text is greater than the number of rows, if it is stop pasting
                if (nextRowElement.length > 0) {
                    currentElement = nextRowElement;
                } else {
                    break;
                }
            }
        } else {
            var existingData = $(currentElement).val();
            $(currentElement).focus().val(existingData + arrGroup[i]);
        }
        var nextElement = $(currentElement).closest('tr').next().find('[fieldName="' + fieldName + '"]input');
        //sometimes the pasted text is greater than the number of rows, if it is stop pasting
        if (nextElement.length > 0) {
            currentElement = nextElement;
        } else {
            break;
        }
    }
}


function initializeLookupDialog(){
    lookup = $('#lookupDialog');

    lookup.dialog({
        autoOpen: false,
        modal: true,
        title: "Customer Lookup",
        width: 900,
        height: 600

    }
        );
}

function setContentLeftMargin() {
	if ($("#leftContentContainer").is(":visible")){
		var thisMarginLeft = $("#leftContentContainer").width() + 2;
		
		$("#mainContentContainer").css("margin-left", thisMarginLeft + "px");
	}
	

}

function setDetailTabWidth() {
	var tabContainer = $("#mainContent_tabsContainer");
	var detailContainer = $("#mainContent_dtlContainer");

	if (tabContainer.width() > detailContainer.width()) {
		detailContainer.width(tabContainer.width())
	}

}

function parseURLFor_p_Parameters() {
    var returnValue = "";
    var pairs = location.search.replace('?', '').split('&');
    $.each(pairs, function (i, v) {
        var pair = v.split('=');
        if (pair[0] == 'p') {
            if (returnValue.length > 0) {
                returnValue = returnValue + '&';
            }
            returnValue = returnValue + 'p=' + pair[1];
        }
    });

    return returnValue;
}

/******************************************************************************
Grid Navigation Using Arrow Keys
******************************************************************************/
function activateGridNavigation(activate)
{
    if (activate) {
        
        $('table[controlType="Grid"] tr td input').keydown(function (e) {
            //could add ',table[controlType="Grid"] tr td select' to add functionality to drop downs, but drop downs should
            //default to use of the drop down with up and down arrows
            
            var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
            var currentFieldName = $(this).attr("fieldName");
            
            if (key == 38) { /*up*/
                e.preventDefault();
                var prevRowField = $(this).closest('tr').prev().find('[fieldName="' + currentFieldName + '"]');
                $(prevRowField).focus(function () { $(this).select(); });
                prevRowField.eq(prevRowField.index(this) + 1).focus();
                $(prevRowField).select();
                $(this).blur();
            }
            if (key == 40) { /*down*/
                e.preventDefault();
                var nextRowField = $(this).closest('tr').next().find('[fieldName="'+ currentFieldName +'"]');
                $(nextRowField).focus(function() { $(this).select(); });
                nextRowField.eq(nextRowField.index(this) + 1).focus();
                $(nextRowField).select();
                $(this).blur();
            }
            //After coding this I realize we can just use tab and shift+tab for left to right navigation
            //if (key == 37) { /*left*/
            //    e.preventDefault();
            //    var prevField = $(this).closest('td').prevAll('[class!="hiddenField"]').find('input,select');
            //    $(prevField).focus(function () { $(this).select(); });
            //    prevField.eq(prevField.index(this) + 1).focus();
            //    $(prevField).select();
            //    $(this).blur();
            //}
            //if (key == 39) { /*right*/
            //    e.preventDefault();
            //    var nextField = $(this).closest('td').nextAll('[class!="hiddenField"]').find('input,select');
            //    $(nextField).focus(function () { $(this).select(); });
            //    nextField.eq(nextField.index(this) + 1).focus();
            //    $(nextField).select();
            //    $(this).blur();
            //}
           

        });
        
    }
}

function AutoClickFirstLinkForSingleRow() {
    var t = $("#csiGridMaster");
    // if there is not grid master, return
    if (t.length == 0) {
        return;
    };

    // if there is not a single result row, return
    // may need to make this smarter...
    if (t[0].rows.length != 4) {
        return;
    };

    var c = t[0].rows[1].cells[0];
    c.firstChild.click();
}


/*******************************************************************************
    setAllRows used by UpdateAllRows functionality
*******************************************************************************/

function setAllRows(e) {

    if (ProcessingAllRows) {
        return;
    }
    ProcessingAllRows = true;

    var source = e.target || e.srcElement;

    var sFieldName = $(source).attr("fieldName");

    //if checkbox set the checked property
    if ($(source).prop('type') == 'checkbox') {
	$("[fieldName='" + sFieldName+ "']").prop('checked', $(source).prop('checked'));
    }
    //otherwise use the value
    else {
	$("[fieldName='" + sFieldName+ "']").val($(source).val());

    }

    //force validation on all controls...try catch to work around the selector finding the header control itself

    $("[fieldName='" + sFieldName+ "']").each(function() { try{ $(this).valid(); } catch(f) {} }); 

    ProcessingAllRows = false;



}

/*******************************************************************************
Initializing JQuery validation plug-in...
*******************************************************************************/

function initializeValidation() {
    try {
        $(solutionBuilderPrimaryForm).validate({
            ignore: ".ignore_validation",
            onfocusout: function (element) {
                $(element).valid();
            },
	    onkeyup: false
        });

        // $("input#btnCancel").click(cancelButtonOnClick);
        $("#mainContent_cancelFormMasterBtn").click(
            function () {
                $(solutionBuilderPrimaryForm).validate().resetForm();
            }
        );

    }
    catch (e) {

    }
    try {
        $(solutionBuilderPrimaryForm).validate();
        $("#mainContent_cancelFormDetailBtn").click(
            function () {
                $(solutionBuilderPrimaryForm).validate().resetForm();
            }
        );
    }
    catch (e) {

    }
}

function cancelButtonOnClick() {
    $(solutionBuilderPrimaryForm).validate().cancelSubmit = true;
}


/*******************************************************************************
Cargas Solution Builder - Custom JQuery validation rules 
*******************************************************************************/
function handleSave(DoPostBack) {
    stripInputs();
    $('table[controlType="Grid"]').find('tr').each(function () {
        var rowHasChanged = false;
        $(this).find("input[data-stored],select[data-stored],textarea[data-stored]").each(function () {
            var value = $(this).val();
            var storedValue = $(this).data("stored");
            // alert($(this).attr('id') + ' Stored: ' + storedValue + ' New: ' + value);


            if (value != storedValue) {
                rowHasChanged = true;
            }
        });

        if (!rowHasChanged) {
            $(this).find("input[data-stored],select[data-stored],textarea[data-stored]").each(function () {
                $(this).addClass("ignore_validation");
                $(this).removeClass("required");
                $(this).removeClass("selectRequired");
                $(this).attr("previousRequired", "true");

            });
        }
    });

    // for some reason selects and textareas are not being validated with the form, so check them manually
    // I don't think this is the best way to do so, but this is the best I could come up with after 2 hours of research

    // Amen - RTM

    var allElementsValid = true;
    $('#mainContent_csiGridMaster').find("select,textarea").each(function () {
        var currentElementValid = $(this).valid();
        if (!currentElementValid) {
            allElementsValid = false;
        }
    });

    if ($(solutionBuilderPrimaryForm).valid() && allElementsValid) // check if form is valid
    {
        eval(DoPostBack);
    }
    else {
        $('#mainContent_csiGridMaster').find("input[data-stored],textarea[data-stored]").each(function () {
            if ($(this).attr("previousRequired") == "true") {
                $(this).addClass('required');
            }
            $(this).removeClass("ignore_validation");
        });
        $('#mainContent_csiGridMaster').find("select[data-stored]").each(function () {
            if ($(this).attr("previousRequired") == "true") {
                $(this).addClass('selectRequired');
            }
            $(this).removeClass("ignore_validation");
        });
    }
}

function setValidationOnElement(element, IsValid, Message) {
    var validator = $('form').data('validator')
    if (IsValid) {
        var submitted = validator.formSubmitted;
        validator.prepareElement(element);
        validator.formSubmitted = submitted;
        validator.successList.push(element);
        delete validator.invalid[element.name];
        validator.showErrors();
    } else {
        //jQuery.validator.addMethod(element.name, function () { return false; }, Message)
        //$('#' + element.id).rules('add', {required: true, messages: {required: Message}}) 
        var errors = {};
        errors[element.name] = Message;
        validator.invalid[element.name] = true;
        validator.showErrors(errors);
    }
}

function serverValidate(value, element) {

    //check for "pre processor" and call

    //process server validation
    var sourceString = "DataLoad/DataLoad.aspx?resultType=dataValidation&ScreenID=" + solutionBuilderScreenID + "_TruckNumber" + "&" + p_parameters + "&p=" + value + "&field=" + element.name;

    return $.validator.methods.remote.call(this, value, element, {
        url: sourceString
    });

    //alert(returnValue)
    //return returnValue;

    //set message and return result
    //this.defaultMessage = "test message";
    //return false;  //"test message";
    //phone_number = phone_number.replace(/\s+/g, "");
    //return this.optional(element) || phone_number.length > 9 &&
    //phone_number.match(/^(1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/);

}

function handleLogout() {

    window.location.href = "formListTemplate.aspx?screenID=Logout&p=";

}

/*******************************************************************************
Initializing JQuery UI controls
*******************************************************************************/

var autoCompleteFirstItem;

//// AutoComplete...
//function autoCompleteInitialize(inputControl, screenID, fieldName, minLengthValue) {
//    var sourceString = "DataSend/DataSend_AutoComplete.ashx?ScreenID=" + screenID + "&FieldName=" + fieldName + "&" + p_parameters;
//    inputControl.data("autoCompleteScreenID", screenID);
//    inputControl.data("autoCompleteFieldName", fieldName);
//    inputControl.autocomplete({
//        source: sourceString,
//        delay: 50,
//        minLength: minLengthValue,
//        select: autoCompleteOnSelect,
//        focus: autoCompleteOnFocus,
//        response: autoCompleteOnResponse,
//        change: autoCompleteOnChange
//    });
//    inputControl.data("autocomplete")._renderItem = autoCompleteOnRenderItem;
//}

//function autoCompleteOnSelect(event, ui) {
//    event.target.value = ui.item.label.replace(/<strong>/g, "").replace(/<\/strong>/g, "");
//    $(event.target).prev().parent().prev().val(ui.item.value).change();
//    if (typeof autoCompleteOnSelectCustom == 'function') {
//        autoCompleteOnSelectCustom($(event.target).data("autoCompleteScreenID"),
//        		$(event.target).data("autoCompleteFieldName"), event.target, event, ui);
//    }
//    return false;
//}

//function autoCompleteOnFocus(event, ui) {
//    $("li.first a.ui-state-hover").removeClass("ui-state-hover");
//    $(this).prev().val(ui.item.value);
//    this.value = ui.item.label.replace(/<strong>/g, "").replace(/<\/strong>/g, "");
//    return false;
//}

//function autoCompleteOnResponse(event, ui) {
//    var regExp;
//    var thisValue;
//    var thisSearch = $(this).data().autocomplete.term;
//    autoCompleteFirstItem = undefined;
//    for (var item in ui.content) {
//        regExp = new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + thisSearch + ")(?![^<>]*>)(?![^&;]+;)", "gi");
//        thisValue = ui.content[item].label.replace(regExp, "<strong>$1</strong>");
//        if (ui.content[item].label != thisValue) {
//            ui.content[item].label = thisValue;
//            if (!autoCompleteFirstItem) {
//                autoCompleteFirstItem = ui.content[item];
//                autoCompleteFirstItem.selected = true;
//            }
//        }
//    }
//}

//function autoCompleteOnChange(event, ui) {

//    var autoComplete = $.data(this).autocomplete;

//    var isTermEmpty = (this.value.length == 0);
//    if (autoComplete.selectedItem == undefined && !isTermEmpty) {
//        if (autoCompleteFirstItem) {
//            ui.item = autoCompleteFirstItem;
//            autoCompleteOnSelect(event, ui);
//        } else {
//            this.value = this.lastValue ? this.lastValue : this.defaultValue;
//            this.previousSibling.value = this.previousSibling.lastValue
//					? this.previousSibling.lastValue
//					: this.previousSibling.defaultValue;
//        }
//    } else if (isTermEmpty) {
//        this.value = "";
//        this.previousSibling.value = "";
//    }
//    this.lastValue = this.value;
//    this.previousSibling.lastValue = this.previousSibling.value;
//}



//function autoCompleteOnRenderItem(ul, item) {

//    var isFirstItem = autoCompleteFirstItem.value == item.value;
//    var liClass = isFirstItem ? "first" : "";
//    var aClass = isFirstItem ? "ui-state-hover" : "";
//    return $("<li class=\"" + liClass + "\"></li>")
//				.data("item.autocomplete", item)
//				.append("<a class=\"" + aClass + "\">" + item.label + "</a>")
//				.appendTo(ul);
//}

// Date picker...
function datePickerInitialize(inputControl) {

    inputControl.datepicker({
        changeMonth: true,
        changeYear: true,
        showOn: "button",
        buttonImage: "images/calendar__minus.png",
        buttonImageOnly: true,
	onSelect: function() {
		//some older browsers don't fire the change event when date is selected
    		$(inputControl).change();
  	}
    });

    //tweak this to get the layout right in angular design contained layout...
    //need to wrap the input in a div
    $(inputControl).wrap("<div></div>")

    
    inputControl.keypress(function (event) {
        //may need to revisit to work in the keypad functionality
        //are they different key codes?

        //45/109= Minus keypress
        //61= Equals keypress (plus key without shift)
        //43/107= Plus key
        //84/116= T/t (today)
        //89/121= Y/y Beginning of year, decrement by year
        //82/114= R/r End of year, increment by year
        //77/109= M/m beginning of month, decrement by month
        //72/104= H/h end of month, increment by month
        //87/119= W/w beginning of week (Sunday) decrement by week 
        //75/107= K/k end of week (Saturday) increment by week

        if (event.which == 45 || event.which == 61 || event.which == 43
            || event.which == 84 || event.which == 116
            || event.which == 89 || event.which == 121
            || event.which == 82 || event.which == 114
            || event.which == 77 || event.which == 109
     		|| event.which == 72 || event.which == 104
			|| event.which == 87 || event.which == 119
			|| event.which == 75 || event.which == 107
		) {
            event.preventDefault();
            var timestamp = Date.parse($(this).val())
            if (isNaN(timestamp) == false) {
                var d = new Date($(this).val());
                switch (event.which) {
                    case 45:
                        d = addDays(d, -1);

                        break;
                    case 43:
                    case 61:
                        d = addDays(d, 1);
                        break;
                    case 84:
                    case 116:
                        d = new Date();
                        break;
                    case 89:
                    case 121:
                        var year = d.getFullYear();
                        if (d.getMonth() == 0 && d.getDate() == 1) year -= 1;
                        d = new Date('1/1/' + year);
                        break;
                    case 82:
                    case 114:
                        var year = d.getFullYear();
                        if (d.getMonth() == 11 && d.getDate() == 31) year += 1;
                        d = new Date('12/31/' + year);
                        break;
                    case 77:
                    case 109:
                        var month = d.getMonth();
                        var day = d.getDate();
                        //if current date is not first day of the month, go to first day of this month.
                        if (day > 1) day = 1;
                            //otherwise go to first day of last month
                        else d.setMonth(month - 1);
                        d = new Date((d.getMonth() + 1) + '/' + day + '/' + d.getFullYear());
                        break;
                    case 72:
                    case 104:
                        //if current date is not the last day of month, go to last day of the month. 
                        currentDay = d.getDate();
                        d2 = new Date(d);
                        //get first day of next month
                        d2 = addDays(d2, (35 - d2.getDate()));
                        d2 = new Date((d2.getMonth() + 1) + '/1/' + d2.getFullYear())
                        //subtract 1 day to get last day of this month
                        d2 = addDays(d2, -1);
                        if (d2.getDate() != currentDay) {
                            d = d2;
                        }
                        else {
                            //otherwise go to last day of next month
                            //get first day of 2 months from now
                            d = addDays(d, (35 - d.getDate()));
                            d = addDays(d, (35 - d.getDate()));
                            d = new Date((d.getMonth() + 1) + '/1/' + d.getFullYear());
                            //subtract 1 day to get last day of next month
                            d = addDays(d, -1);

                        }

                        break;
                    case 87:
                    case 119:
                        //get previous sunday
                        if (d.getDay() == 0) {
                            d = addDays(d, -7);
                        }
                        else {
                            d = new Date(d.setDate(d.getDate() - d.getDay()));
                        }
                        break;
                    case 75:
                    case 107:
                        //get next saturday
                        if (d.getDay() == 6) {
                            d = addDays(d, 7);
                        }
                        else {
                            d = new Date(d.setDate((d.getDate() - d.getDay() + 6)));
                        }
                        break;
                }
                $(this).val((d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear());
                //some older browsers don't fire the change event when date is selected
                $(this).change();
            }
            else {
                var d = new Date();
                $(this).val((d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear());
                //some older browsers don't fire the change event when date is selected
                $(this).change();
            }

        }


    });
}

// cargas Popup...
function cargasPopupInitialize(inputControl, title, url) {

    inputControl.cargasPopup(
            {
                title: title
            , lookupDiv: lookup
            , url: url
            , width: 700
            , height: 450
            }
            );
}


function addDays(date, days) {
    var result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}


/*******************************************************************************
Preventing multiple form submissions
*******************************************************************************/


function hijackPostBack() {
    if (typeof __doPostBack != 'undefined') {
        var old__doPostBack = __doPostBack;
        if (typeof __doPostBack != 'function') {
            __doPostBack = func;
        } else {
            __doPostBack = function(t, a) {
                if (preventDoubleSubmit()) old__doPostBack(t, a);
            }
        }
    }
}

var isSubmitInProgress = false;

function preventDoubleSubmit() {
    stripInputs();
    if (isSubmitInProgress) {
        alert("Form submission is already in progress.");
        return false;
    } else if (solutionBuilderPrimaryForm && solutionBuilderPrimaryForm.valid()) {
        isSubmitInProgress = true;
        disableAllSubmitElements();
        return true;
    } else {
        return undefined;
    }
}

function disableAllSubmitElements() {

    // Submits need cloned because a disabled submit won't trigger ASP.Net events...
    $("input:submit").each(function () {
        var clone = this.cloneNode(false);
        clone.disabled = true;
        $(this).css('display', 'none');
        $(clone).insertAfter($(this));
    });

    // Other controls that can cause submits can just be disabled...
    $("input:button").prop("disabled", "disabled");
    $("a[onclick*=doPost]").prop("disabled", "disabled");
    $("a[href*=doPost]").prop("disabled", "disabled");


}

/*******************************************************************************
Warning about unsaved changes
*******************************************************************************/

var unsavedChangesWarning = "Unsaved changes made on this page will be lost.\n\n"
        + "Stay on this page and click the Save button to save your changes.";

function initializeUnsavedChangesWarning(screenID) {
    if (!screenID) { return };
    var screenIDEndsWithForm = screenID.indexOf("Form", screenID.length - "Form".length) !== -1;
    var screenIDEndsWithFormNew = screenID.indexOf("Form_New", screenID.length - "Form_New".length) !== -1;
    //    if ( screenID!='Dealer_Form' && (screenIDEndsWithForm || screenIDEndsWithFormNew) ) {

    if (screenIDEndsWithForm || screenIDEndsWithFormNew) {
        $('input:not(:button,:submit),textarea,select').change(inputOnChangeForUnsavedChangesWarning);
        $('input:submit').click(submitOnClickForUnsavedChangesWarning);
        $("[class*='headerButton']").click(submitOnClickForUnsavedChangesWarning);
        $("input:button").click(submitOnClickForUnsavedChangesWarning);
        $("a[onclick*=doPost]").click(submitOnClickForUnsavedChangesWarning);
        $("a[href*=doPost]").click(submitOnClickForUnsavedChangesWarning);
        //modify to take into account buttons that will do a data save...do not wire to those
        //isWorkflowProcess="true" doNotSave="false"

    }

}

function inputOnChangeForUnsavedChangesWarning() {
    window.onbeforeunload = windowOnBeforeUnloadForUnsavedChangesWarning;
}

function submitOnClickForUnsavedChangesWarning() {
    unsavedChangesWarning = null;
}

function windowOnBeforeUnloadForUnsavedChangesWarning() {
    return (unsavedChangesWarning != null) ? unsavedChangesWarning : undefined;
}

/****************************************************
general use functions
***************************************************/

//use in place of window.open
function showInDialog(thisURL, title, width, height, positionX, positionY) {
    
    //Set the position, if provided
    var positionDefined = false;
        if ('undefined' === typeof positionX || 'undefined' === typeof positionY){
      positionDefined = false;
    }
    if (positionX && positionY){
      positionDefined = true;
    } else {
      positionDefined = false;
    }

    if (positionDefined){
      lookup.dialog("option", "position", [positionX, positionY]);
    }

    //set default width and height
    var dimensionsDefined = false;
    if ('undefined' === typeof width || 'undefined' === typeof height){
      dimensionsDefined = false;
    }
    if (width && height){
      dimensionsDefined = true;
    } else {
      dimensionsDefined = false;
    }
    
    if (!dimensionsDefined){
      width = 900;
      height = 600;
    }
    
    width = parseInt(width);
    height = parseInt(height);

    //set the title, width, and height
    lookup.dialog("option", "width", width);
    lookup.dialog("option", "height", height);
    lookup.dialog("option", "title", title);

    lookup.html('<iframe  width="100%" height="100%" src="' + thisURL + '" frameborder="0" />');
    lookup.dialog("open");
}


function showPopupPage(sURL, windowName, config) {

    var title = document.activeElement.innerHTML;

    if (title == '') {
	title=windowName;
    }

    var configArray = config.split(",");
    var configSettings = {};
    $.each(configArray, function (index, value) { var keyValue = value.split("="); configSettings[keyValue[0]] = keyValue[1]; });


    showInDialog(sURL, title, configSettings.width, configSettings.height);
}

function closeDialog(fromInsideDialog, refreshParent, dataOnly, saveParentBeforeRefresh) {
    
    if ('undefined' === typeof dataOnly) {
        dataOnly = true;
    }
    if ('undefined' === typeof saveParentBeforeRefresh) {
        saveParentBeforeRefresh = false;
    }
    var thisLookup = lookup
    

	if (fromInsideDialog) {
	    thisLookup = window.parent.lookup;
	}

	if (refreshParent) {
	    //I can't seem to get the scope working from the body element, however I could manage to fire the click event of the buttons
	    if (saveParentBeforeRefresh) {
	        angular.element(window.parent.document.getElementById('saveButton')).trigger('click');
	    }
	    if (dataOnly) {
	        angular.element(window.parent.document.getElementById('refreshButton')).trigger('click');
	    } else {
	        window.parent.location.replace(window.parent.location);
	    }
	    
	    
	}

	thisLookup.dialog("close");
	
	
}


/********************************************************************************
Cargas Widgets
*******************************************************************************/


function lineUpDivs() {

    var currentTallest = 0,
     currentRowStart = 0,
     rowDivs = new Array(),
     $el,
     topPosition = 0;
    $('.contentDiv').each(function () {
        $el = $(this);

        topPosition = $el.position().top;

        if (currentRowStart != topPosition) {

            // we just came to a new row.  Set all the heights on the completed row
            for (var currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
                rowDivs[currentDiv].height(currentTallest);
            }

            // set the variables for the new row
            rowDivs.length = 0; // empty the array
            currentRowStart = topPosition;
            currentTallest = $el.height();
            rowDivs.push($el);

        } else {

            // another div on the current row.  Add it to the list and check if it's taller
            rowDivs.push($el);
            currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);

        }

        // do the last row
        for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
            rowDivs[currentDiv].height(currentTallest);

        }
    });

}
